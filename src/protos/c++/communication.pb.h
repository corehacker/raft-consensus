// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communication.proto

#ifndef PROTOBUF_communication_2eproto__INCLUDED
#define PROTOBUF_communication_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace raft {
class Body;
class BodyDefaultTypeInternal;
extern BodyDefaultTypeInternal _Body_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class HeartBeat;
class HeartBeatDefaultTypeInternal;
extern HeartBeatDefaultTypeInternal _HeartBeat_default_instance_;
class Mail;
class MailDefaultTypeInternal;
extern MailDefaultTypeInternal _Mail_default_instance_;
}  // namespace raft

namespace raft {

namespace protobuf_communication_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_communication_2eproto

enum MailType {
  REQUEST = 0,
  RESPONSE = 1
};
bool MailType_IsValid(int value);
const MailType MailType_MIN = REQUEST;
const MailType MailType_MAX = RESPONSE;
const int MailType_ARRAYSIZE = MailType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MailType_descriptor();
inline const ::std::string& MailType_Name(MailType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MailType_descriptor(), value);
}
inline bool MailType_Parse(
    const ::std::string& name, MailType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MailType>(
    MailType_descriptor(), name, value);
}
enum Mails {
  HEARTBEAT = 0
};
bool Mails_IsValid(int value);
const Mails Mails_MIN = HEARTBEAT;
const Mails Mails_MAX = HEARTBEAT;
const int Mails_ARRAYSIZE = Mails_MAX + 1;

const ::google::protobuf::EnumDescriptor* Mails_descriptor();
inline const ::std::string& Mails_Name(Mails value) {
  return ::google::protobuf::internal::NameOfEnum(
    Mails_descriptor(), value);
}
inline bool Mails_Parse(
    const ::std::string& name, Mails* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Mails>(
    Mails_descriptor(), name, value);
}
// ===================================================================

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  inline Header* New() const PROTOBUF_FINAL { return New(NULL); }

  Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .raft.Mails mails = 3;
  int mails_size() const;
  void clear_mails();
  static const int kMailsFieldNumber = 3;
  ::raft::Mails mails(int index) const;
  void set_mails(int index, ::raft::Mails value);
  void add_mails(::raft::Mails value);
  const ::google::protobuf::RepeatedField<int>& mails() const;
  ::google::protobuf::RepeatedField<int>* mutable_mails();

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required .raft.MailType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::raft::MailType type() const;
  void set_type(::raft::MailType value);

  // @@protoc_insertion_point(class_scope:raft.Header)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> mails_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  int type_;
  friend struct protobuf_communication_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeartBeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.HeartBeat) */ {
 public:
  HeartBeat();
  virtual ~HeartBeat();

  HeartBeat(const HeartBeat& from);

  inline HeartBeat& operator=(const HeartBeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeat& default_instance();

  static inline const HeartBeat* internal_default_instance() {
    return reinterpret_cast<const HeartBeat*>(
               &_HeartBeat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(HeartBeat* other);

  // implements Message ----------------------------------------------

  inline HeartBeat* New() const PROTOBUF_FINAL { return New(NULL); }

  HeartBeat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeartBeat& from);
  void MergeFrom(const HeartBeat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeartBeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft.HeartBeat)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 timestamp_;
  friend struct protobuf_communication_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Body : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.Body) */ {
 public:
  Body();
  virtual ~Body();

  Body(const Body& from);

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Body& default_instance();

  static inline const Body* internal_default_instance() {
    return reinterpret_cast<const Body*>(
               &_Body_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Body* other);

  // implements Message ----------------------------------------------

  inline Body* New() const PROTOBUF_FINAL { return New(NULL); }

  Body* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Body& from);
  void MergeFrom(const Body& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Body* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .raft.HeartBeat heartBeat = 1;
  bool has_heartbeat() const;
  void clear_heartbeat();
  static const int kHeartBeatFieldNumber = 1;
  const ::raft::HeartBeat& heartbeat() const;
  ::raft::HeartBeat* mutable_heartbeat();
  ::raft::HeartBeat* release_heartbeat();
  void set_allocated_heartbeat(::raft::HeartBeat* heartbeat);

  // @@protoc_insertion_point(class_scope:raft.Body)
 private:
  void set_has_heartbeat();
  void clear_has_heartbeat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::raft::HeartBeat* heartbeat_;
  friend struct protobuf_communication_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.Mail) */ {
 public:
  Mail();
  virtual ~Mail();

  Mail(const Mail& from);

  inline Mail& operator=(const Mail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mail& default_instance();

  static inline const Mail* internal_default_instance() {
    return reinterpret_cast<const Mail*>(
               &_Mail_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Mail* other);

  // implements Message ----------------------------------------------

  inline Mail* New() const PROTOBUF_FINAL { return New(NULL); }

  Mail* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Mail& from);
  void MergeFrom(const Mail& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Mail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .raft.Body body = 2;
  int body_size() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::raft::Body& body(int index) const;
  ::raft::Body* mutable_body(int index);
  ::raft::Body* add_body();
  ::google::protobuf::RepeatedPtrField< ::raft::Body >*
      mutable_body();
  const ::google::protobuf::RepeatedPtrField< ::raft::Body >&
      body() const;

  // required .raft.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::raft::Header& header() const;
  ::raft::Header* mutable_header();
  ::raft::Header* release_header();
  void set_allocated_header(::raft::Header* header);

  // @@protoc_insertion_point(class_scope:raft.Mail)
 private:
  void set_has_header();
  void clear_has_header();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::raft::Body > body_;
  ::raft::Header* header_;
  friend struct protobuf_communication_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// required string id = 1;
inline bool Header::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Header::id() const {
  // @@protoc_insertion_point(field_get:raft.Header.id)
  return id_.GetNoArena();
}
inline void Header::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft.Header.id)
}
#if LANG_CXX11
inline void Header::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft.Header.id)
}
#endif
inline void Header::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft.Header.id)
}
inline void Header::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft.Header.id)
}
inline ::std::string* Header::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:raft.Header.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_id() {
  // @@protoc_insertion_point(field_release:raft.Header.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:raft.Header.id)
}

// required .raft.MailType type = 2;
inline bool Header::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::raft::MailType Header::type() const {
  // @@protoc_insertion_point(field_get:raft.Header.type)
  return static_cast< ::raft::MailType >(type_);
}
inline void Header::set_type(::raft::MailType value) {
  assert(::raft::MailType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:raft.Header.type)
}

// repeated .raft.Mails mails = 3;
inline int Header::mails_size() const {
  return mails_.size();
}
inline void Header::clear_mails() {
  mails_.Clear();
}
inline ::raft::Mails Header::mails(int index) const {
  // @@protoc_insertion_point(field_get:raft.Header.mails)
  return static_cast< ::raft::Mails >(mails_.Get(index));
}
inline void Header::set_mails(int index, ::raft::Mails value) {
  assert(::raft::Mails_IsValid(value));
  mails_.Set(index, value);
  // @@protoc_insertion_point(field_set:raft.Header.mails)
}
inline void Header::add_mails(::raft::Mails value) {
  assert(::raft::Mails_IsValid(value));
  mails_.Add(value);
  // @@protoc_insertion_point(field_add:raft.Header.mails)
}
inline const ::google::protobuf::RepeatedField<int>&
Header::mails() const {
  // @@protoc_insertion_point(field_list:raft.Header.mails)
  return mails_;
}
inline ::google::protobuf::RepeatedField<int>*
Header::mutable_mails() {
  // @@protoc_insertion_point(field_mutable_list:raft.Header.mails)
  return &mails_;
}

// -------------------------------------------------------------------

// HeartBeat

// required uint64 timestamp = 1;
inline bool HeartBeat::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartBeat::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartBeat::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartBeat::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 HeartBeat::timestamp() const {
  // @@protoc_insertion_point(field_get:raft.HeartBeat.timestamp)
  return timestamp_;
}
inline void HeartBeat::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:raft.HeartBeat.timestamp)
}

// -------------------------------------------------------------------

// Body

// optional .raft.HeartBeat heartBeat = 1;
inline bool Body::has_heartbeat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Body::set_has_heartbeat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Body::clear_has_heartbeat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Body::clear_heartbeat() {
  if (heartbeat_ != NULL) heartbeat_->::raft::HeartBeat::Clear();
  clear_has_heartbeat();
}
inline const ::raft::HeartBeat& Body::heartbeat() const {
  // @@protoc_insertion_point(field_get:raft.Body.heartBeat)
  return heartbeat_ != NULL ? *heartbeat_
                         : *::raft::HeartBeat::internal_default_instance();
}
inline ::raft::HeartBeat* Body::mutable_heartbeat() {
  set_has_heartbeat();
  if (heartbeat_ == NULL) {
    heartbeat_ = new ::raft::HeartBeat;
  }
  // @@protoc_insertion_point(field_mutable:raft.Body.heartBeat)
  return heartbeat_;
}
inline ::raft::HeartBeat* Body::release_heartbeat() {
  // @@protoc_insertion_point(field_release:raft.Body.heartBeat)
  clear_has_heartbeat();
  ::raft::HeartBeat* temp = heartbeat_;
  heartbeat_ = NULL;
  return temp;
}
inline void Body::set_allocated_heartbeat(::raft::HeartBeat* heartbeat) {
  delete heartbeat_;
  heartbeat_ = heartbeat;
  if (heartbeat) {
    set_has_heartbeat();
  } else {
    clear_has_heartbeat();
  }
  // @@protoc_insertion_point(field_set_allocated:raft.Body.heartBeat)
}

// -------------------------------------------------------------------

// Mail

// required .raft.Header header = 1;
inline bool Mail::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mail::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mail::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mail::clear_header() {
  if (header_ != NULL) header_->::raft::Header::Clear();
  clear_has_header();
}
inline const ::raft::Header& Mail::header() const {
  // @@protoc_insertion_point(field_get:raft.Mail.header)
  return header_ != NULL ? *header_
                         : *::raft::Header::internal_default_instance();
}
inline ::raft::Header* Mail::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::raft::Header;
  }
  // @@protoc_insertion_point(field_mutable:raft.Mail.header)
  return header_;
}
inline ::raft::Header* Mail::release_header() {
  // @@protoc_insertion_point(field_release:raft.Mail.header)
  clear_has_header();
  ::raft::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Mail::set_allocated_header(::raft::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:raft.Mail.header)
}

// repeated .raft.Body body = 2;
inline int Mail::body_size() const {
  return body_.size();
}
inline void Mail::clear_body() {
  body_.Clear();
}
inline const ::raft::Body& Mail::body(int index) const {
  // @@protoc_insertion_point(field_get:raft.Mail.body)
  return body_.Get(index);
}
inline ::raft::Body* Mail::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:raft.Mail.body)
  return body_.Mutable(index);
}
inline ::raft::Body* Mail::add_body() {
  // @@protoc_insertion_point(field_add:raft.Mail.body)
  return body_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::raft::Body >*
Mail::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:raft.Mail.body)
  return &body_;
}
inline const ::google::protobuf::RepeatedPtrField< ::raft::Body >&
Mail::body() const {
  // @@protoc_insertion_point(field_list:raft.Mail.body)
  return body_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace raft

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::raft::MailType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft::MailType>() {
  return ::raft::MailType_descriptor();
}
template <> struct is_proto_enum< ::raft::Mails> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft::Mails>() {
  return ::raft::Mails_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_communication_2eproto__INCLUDED
